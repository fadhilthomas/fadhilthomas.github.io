[{"content":" Tulisan ini dibuat sebagai catatan saat mencoba Falco untuk memantau container secara runtime di Amazon EKS.\nApa itu Falco? Falco adalah aplikasi runtime security yang berlisensi open-source dan gratis dikembangkan Sysdic, Inc. Saat tulisan ini dibuat, Falco masuk ke dalam CNCF project dengan status inkubasi.\nManfaat Falco Falco dapat mendeteksi dan mengirimkan notifikasi apabila ada aktifitas di dalam container yang dianggap mencurigakan sesuai dengan aturan atau rule yang sudah dibuat sebelumnya. Falco dapat memantau system call Linux dengan menggunakan kernel module atau eBPF probe dari kernel secara runtime.\nFalco memiliki beberapa rule bawaan, diantaranya:\nPrivilege escalation menggunakan privileged containers Perubahan namespace menggunakan aplikasi seperti setns Aktivitas baca atau tulis ke direktori terkenal seperti /etc, /usr/bin, /usr/sbin, dan lain-lain Pembuatan symlinks Perubahan ownership dan mode Koneksi jaringan yang tidak terduga atau perubahan socket Memunculkan process menggunakan execve Mengeksekusi shell binaries seperti sh, bash, csh, zsh, dan lain-lain Mengeksekusi SSH binaries seperti ssh, scp, sftp, dan lain-lain Perubahan Linux coreutils executables Perubahan login binaries Perubahan shadowutil or passwd executables seperti shadowconfig, pwck, chpasswd, getpasswd, change, useradd, dan lain-lain. Penjelasan singkat untuk Falco sudah cukup, untuk ingin tahu lebih detil bisa lihat dokumentasi Falco di https://falco.org/docs/ dan daftar lengkap rule bisa lihat di https://github.com/falcosecurity/falco/tree/master/rules.\nPemasangan Falco Berikut adalah gambaran umum arsitektur yang akan dideploy pada tulisan ini.\nKubernetes Cluster Sebelum dapat memasang Falco, terlebih dahulu perlu mendeploy sebuah kluster Kubernetes. Di tulisan ini, saya memilih Amazon EKS dengan bantuan aplikasi eksctl dengan CloudFormation. Berikut adalah manifest yang digunakan untuk mendeploy Kubernetes kluster.\nfalco-cluster.yml\napiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: falco-cluster region: ap-southeast-1 version: \u0026#34;1.19\u0026#34; managedNodeGroups: - name: falco-node minSize: 1 maxSize: 2 instanceType: t3a.small amiFamily: AmazonLinux2 volumeSize: 30 volumeEncrypted: true desiredCapacity: 1 Jalankan perintah berikut untuk membuat kluster Kubernetes.\nfadhil@thomas:~$ eksctl create cluster -f falco-cluster.yml Setelah proses pembuatan kluster berhasil, maka akan tersimpan file kube config di path ~/.kube/config\nLog Forwading Log yang dihasilkan oleh Falco akan diteruskan ke Amazon CloudWatch agar terpusat dan nantinya akan memudahkan apabila ingin meneruskannya lagi ke SIEM atau membuat alerting.\nIAM Permission Untuk dapat meneruskan log ke Amazon CloudWatch dibutuhkan perizinan, maka perlu membuat IAM Policy.\niam_role_policy.json\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34;, \u0026#34;logs:DescribeLogStreams\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:logs:*:*:*\u0026#34; ] } ] } Jalankan perintah berikut untuk membuat policy dengan nama EKS-CloudWatchLogs.\nfadhil@thomas:~$ aws iam create-policy --policy-name EKS-CloudWatchLogs --policy-document file://iam_role_policy.json Kemudian tempelkan policy EKS-CloudWatchLogs ke role EKS NodeGroup. Nama role dari EKS NodeGroup dapat dilihat dengan cara berikut:\nBuka halaman Amazon Elastic Kubernetes Service. Pilih falco-cluster di daftar Clusters. Pilih falco-node di Node groups pada tab Compute. Akan terlihat nama role di bagian Node IAM role ARN. Jalankan perintah berikut untuk menambahkan policy EKS-CloudWatchLogs ke EKS NodeGroup role.\nfadhil@thomas:~$ aws iam attach-role-policy --role-name EKS-NODE-ROLE-NAME --policy-arn `aws iam list-policies | jq -r \u0026#39;.[][] | select(.PolicyName == \u0026#34;EKS-CloudWatchLogs\u0026#34;) | .Arn\u0026#39;` Fluent Bit DaemonSet Setelah menyiapkan IAM Permission, kemudian dapat mendeploy Fluent Bit. Berikut adalah manifest dari Fluent Bit.\nfluent-bit-configmap.yml\napiVersion: v1 kind: ConfigMap metadata: name: fluent-bit-config namespace: logging labels: app.kubernetes.io/name: fluent-bit data: fluent-bit.conf: | [SERVICE] Parsers_File parsers.conf [INPUT] Name tail Tag falco.* Path /var/log/containers/falco*.log Parser falco DB /var/log/flb_falco.db Mem_Buf_Limit 5MB Skip_Long_Lines On Refresh_Interval 10 [OUTPUT] Name cloudwatch Match falco.** region ap-southeast-1 log_group_name falco log_stream_name alerts auto_create_group true parsers.conf: | [PARSER] Name falco Format json Time_Key time Time_Format %Y-%m-%dT%H:%M:%S.%L Time_Keep Off # Command | Decoder | Field | Optional Action # =============|==================|================= Decode_Field_As json log fluent-bit-daemonset.yml\napiVersion: apps/v1 kind: DaemonSet metadata: name: fluent-bit namespace: logging labels: app.kubernetes.io/name: fluent-bit spec: selector: matchLabels: name: fluent-bit template: metadata: labels: name: fluent-bit spec: serviceAccountName: fluent-bit containers: - name: aws-for-fluent-bit image: amazon/aws-for-fluent-bit:1.2.2 volumeMounts: - name: varlog mountPath: /var/log - name: varlibdockercontainers mountPath: /var/lib/docker/containers readOnly: true - name: fluent-bit-config mountPath: /fluent-bit/etc/ - name: mnt mountPath: /mnt readOnly: true resources: limits: memory: 500Mi requests: cpu: 500m memory: 100Mi volumes: - name: varlog hostPath: path: /var/log - name: varlibdockercontainers hostPath: path: /var/lib/docker/containers - name: fluent-bit-config configMap: name: fluent-bit-config - name: mnt hostPath: path: /mnt fluent-bit-service-account.yml\napiVersion: v1 kind: Namespace metadata: name: logging --- apiVersion: v1 kind: ServiceAccount metadata: name: fluent-bit namespace: logging --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: pod-log-reader rules: - apiGroups: [\u0026#34;\u0026#34;] resources: - namespaces - pods verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;] --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: pod-log-crb roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: pod-log-reader subjects: - kind: ServiceAccount name: fluent-bit namespace: logging Siapkan semua manifest fluent-bit ke dalam satu folder fluent-bit. Jalankan perintah berikut untuk mendeploy fluent-bit.\nfadhil@thomas:~$ kubectl apply -f fluent-bit/ Falco DaemonSet Ada beberapa cara untuk memasang Falco. Pada tulisan ini saya akan mencoba menggunakan Helm Chart. Terlebih dahulu unduh file values.yaml dari https://github.com/falcosecurity/charts/blob/master/falco/values.yaml. Ubah json_output: false menjadi json_output: true untuk menjadikan format output log Falco menjadi json.\nJalan perintah berikut untuk memasang Falco di kluster Kubernetes yang sudah dibuat sebelumnya.\nfadhil@thomas:~$ helm install falco -f values.yaml falcosecurity/falco --namespace falco --create-namespace Jalankan perintah berikut untuk memeriksa apakah Falco sudah berjalan dengan sukses.\nfadhil@thomas:~$ kubectl get pod -n falco NAME READY STATUS RESTARTS AGE falco-9q9hc 1/1 Running 0 26m Monitored App Untuk uji coba, saya akan mendeploy dvwa [https://github.com/digininja/DVWA] yang nantinya akan dipantau oleh Falco. Perlu diingat dvwa merupakan aplikasi yang memiliki kerentanan terhadap beberapa jenis serangan, jadi jangan mencobanya pada server publik mana pun.\ndvwa-deployment.yml\napiVersion: v1 kind: Namespace metadata: name: dvwa --- apiVersion: apps/v1 kind: Deployment metadata: name: dvwa-app namespace: dvwa spec: replicas: 1 selector: matchLabels: app: dvwa-app template: metadata: labels: app: dvwa-app spec: containers: - image: vulnerables/web-dvwa imagePullPolicy: IfNotPresent name: dvwa-app ports: - containerPort: 80 env: - name: PORT value: \u0026#34;80\u0026#34; --- apiVersion: v1 kind: Service metadata: name: dvwa-app namespace: dvwa spec: ports: - port: 80 targetPort: 80 protocol: TCP type: ClusterIP selector: app: dvwa-app --- Jalankan perintah berikut untuk mendeploy dvwa.\nfadhil@thomas:~$ kubectl apply -f dvwa-deployment.yml Simulasi dan Pengujian Setelah berhasil memasang Falco pada kluster Kubernetes, maka sekarang saatnya uji coba dan simulasi untuk melihat apakah Falco berhasil mendeteksi aktivitas yang mencurigakan.\nMemunculkan Shell Jalankan perintah berikut untuk memunculkan shell di dalam pod dvwa.\nfadhil@thomas:~$ kubectl get pod -n dvwa NAME READY STATUS RESTARTS AGE dvwa-app-54f998c8c5-b85m2 1/1 Running 0 10m fadhil@thomas:~$ kubectl exec -it dvwa-app-54f998c8c5-b85m2 -- /bin/bash root@dvwa-app-54f998c8c5-b85m2:/# Berikut adalah log yang dapat dilihat pada Amazon CloudWatch.\n{ \u0026#34;log\u0026#34;: { \u0026#34;output\u0026#34;: \u0026#34;21:36:54.888738975: Notice A shell was spawned in a container with an attached terminal (user=root user_loginuid=-1 k8s.ns=dvwa k8s.pod=dvwa-app-54f998c8c5-b85m2 container=bf4d401d1c5e shell=bash parent=runc cmdline=bash terminal=34816 container_id=bf4d401d1c5e image=vulnerables/web-dvwa)\u0026#34;, \u0026#34;output_fields\u0026#34;: { \u0026#34;container.id\u0026#34;: \u0026#34;bf4d401d1c5e\u0026#34;, \u0026#34;container.image.repository\u0026#34;: \u0026#34;vulnerables/web-dvwa\u0026#34;, \u0026#34;evt.time\u0026#34;: 1660426614888738975, \u0026#34;k8s.ns.name\u0026#34;: \u0026#34;dvwa\u0026#34;, \u0026#34;k8s.pod.name\u0026#34;: \u0026#34;dvwa-app-54f998c8c5-b85m2\u0026#34;, \u0026#34;proc.cmdline\u0026#34;: \u0026#34;bash\u0026#34;, \u0026#34;proc.name\u0026#34;: \u0026#34;bash\u0026#34;, \u0026#34;proc.pname\u0026#34;: \u0026#34;runc\u0026#34;, \u0026#34;proc.tty\u0026#34;: 34816, \u0026#34;user.loginuid\u0026#34;: -1, \u0026#34;user.name\u0026#34;: \u0026#34;root\u0026#34; }, \u0026#34;priority\u0026#34;: \u0026#34;Notice\u0026#34;, \u0026#34;rule\u0026#34;: \u0026#34;Terminal shell in container\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;syscall\u0026#34;, \u0026#34;tags\u0026#34;: [ \u0026#34;container\u0026#34;, \u0026#34;mitre_execution\u0026#34;, \u0026#34;shell\u0026#34; ], \u0026#34;time\u0026#34;: \u0026#34;2022-08-13T21:36:54.888738975Z\u0026#34; }, \u0026#34;stream\u0026#34;: \u0026#34;stdout\u0026#34; } Membaca File Sensitif Jalankan perintah berikut untuk membaca file shadow di dalam pod dvwa.\nfadhil@thomas:~$ kubectl exec -it dvwa-app-54f998c8c5-b85m2 -- /bin/bash root@dvwa-app-54f998c8c5-b85m2:/# cat /etc/shadow \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 root@dvwa-app-54f998c8c5-b85m2:/# Berikut adalah log yang dapat dilihat pada Amazon CloudWatch.\n{ \u0026#34;log\u0026#34;: { \u0026#34;output\u0026#34;: \u0026#34;21:43:22.271495665: Warning Sensitive file opened for reading by non-trusted program (user=root user_loginuid=-1 program=cat command=cat /etc/shadow file=/etc/shadow parent=bash gparent=\u0026lt;NA\u0026gt; ggparent=\u0026lt;NA\u0026gt; gggparent=\u0026lt;NA\u0026gt; container_id=bf4d401d1c5e image=vulnerables/web-dvwa) k8s.ns=dvwa k8s.pod=dvwa-app-54f998c8c5-b85m2 container=bf4d401d1c5e\u0026#34;, \u0026#34;output_fields\u0026#34;: { \u0026#34;container.id\u0026#34;: \u0026#34;bf4d401d1c5e\u0026#34;, \u0026#34;container.image.repository\u0026#34;: \u0026#34;vulnerables/web-dvwa\u0026#34;, \u0026#34;evt.time\u0026#34;: 1660427002271495665, \u0026#34;fd.name\u0026#34;: \u0026#34;/etc/shadow\u0026#34;, \u0026#34;k8s.ns.name\u0026#34;: \u0026#34;dvwa\u0026#34;, \u0026#34;k8s.pod.name\u0026#34;: \u0026#34;dvwa-app-54f998c8c5-b85m2\u0026#34;, \u0026#34;proc.aname[2]\u0026#34;: null, \u0026#34;proc.aname[3]\u0026#34;: null, \u0026#34;proc.aname[4]\u0026#34;: null, \u0026#34;proc.cmdline\u0026#34;: \u0026#34;cat /etc/shadow\u0026#34;, \u0026#34;proc.name\u0026#34;: \u0026#34;cat\u0026#34;, \u0026#34;proc.pname\u0026#34;: \u0026#34;bash\u0026#34;, \u0026#34;user.loginuid\u0026#34;: -1, \u0026#34;user.name\u0026#34;: \u0026#34;root\u0026#34; }, \u0026#34;priority\u0026#34;: \u0026#34;Warning\u0026#34;, \u0026#34;rule\u0026#34;: \u0026#34;Read sensitive file untrusted\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;syscall\u0026#34;, \u0026#34;tags\u0026#34;: [ \u0026#34;filesystem\u0026#34;, \u0026#34;mitre_credential_access\u0026#34;, \u0026#34;mitre_discovery\u0026#34; ], \u0026#34;time\u0026#34;: \u0026#34;2022-08-13T21:43:22.271495665Z\u0026#34; }, \u0026#34;stream\u0026#34;: \u0026#34;stdout\u0026#34; } Memanfaatkan Kerentanan Command Injection di DVWA Submit google.com; cat /etc/passwd pada text box di halaman DVWA. Berikut adalah log yang dapat dilihat pada Amazon CloudWatch.\n{ \u0026#34;log\u0026#34;: { \u0026#34;output\u0026#34;: \u0026#34;21:57:08.286599298: Debug Shell spawned by untrusted binary (user=www-data user_loginuid=-1 shell=sh parent=apache2 cmdline=sh -c ping -c 4 google.com; cat /etc/passwd pcmdline=apache2 -k start gparent=apache2 ggparent=main.sh aname[4]=\u0026lt;NA\u0026gt; aname[5]=\u0026lt;NA\u0026gt; aname[6]=\u0026lt;NA\u0026gt; aname[7]=\u0026lt;NA\u0026gt; container_id=bf4d401d1c5e image=vulnerables/web-dvwa) k8s.ns=dvwa k8s.pod=dvwa-app-54f998c8c5-b85m2 container=bf4d401d1c5e\u0026#34;, \u0026#34;output_fields\u0026#34;: { \u0026#34;container.id\u0026#34;: \u0026#34;bf4d401d1c5e\u0026#34;, \u0026#34;container.image.repository\u0026#34;: \u0026#34;vulnerables/web-dvwa\u0026#34;, \u0026#34;evt.time\u0026#34;: 1660427828286599298, \u0026#34;k8s.ns.name\u0026#34;: \u0026#34;dvwa\u0026#34;, \u0026#34;k8s.pod.name\u0026#34;: \u0026#34;dvwa-app-54f998c8c5-b85m2\u0026#34;, \u0026#34;proc.aname[2]\u0026#34;: \u0026#34;apache2\u0026#34;, \u0026#34;proc.aname[3]\u0026#34;: \u0026#34;main.sh\u0026#34;, \u0026#34;proc.aname[4]\u0026#34;: null, \u0026#34;proc.aname[5]\u0026#34;: null, \u0026#34;proc.aname[6]\u0026#34;: null, \u0026#34;proc.aname[7]\u0026#34;: null, \u0026#34;proc.cmdline\u0026#34;: \u0026#34;sh -c ping -c 4 google.com; cat /etc/passwd\u0026#34;, \u0026#34;proc.name\u0026#34;: \u0026#34;sh\u0026#34;, \u0026#34;proc.pcmdline\u0026#34;: \u0026#34;apache2 -k start\u0026#34;, \u0026#34;proc.pname\u0026#34;: \u0026#34;apache2\u0026#34;, \u0026#34;user.loginuid\u0026#34;: -1, \u0026#34;user.name\u0026#34;: \u0026#34;www-data\u0026#34; }, \u0026#34;priority\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026#34;rule\u0026#34;: \u0026#34;Run shell untrusted\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;syscall\u0026#34;, \u0026#34;tags\u0026#34;: [ \u0026#34;mitre_execution\u0026#34;, \u0026#34;shell\u0026#34; ], \u0026#34;time\u0026#34;: \u0026#34;2022-08-13T21:57:08.286599298Z\u0026#34; }, \u0026#34;stream\u0026#34;: \u0026#34;stdout\u0026#34; } Kesimpulan Dalam tulisan ini, saya telah menunjukkan bagaimana memantau aktivitas mencurigakan secara runtime di dalam container di kluster Amazon EKS menggunakan Falco, dan meneruskan lognya ke Amazon CloudWatch.\nReferensi https://falco.org/docs/getting-started/ https://eksctl.io/ https://github.com/digininja/DVWA ","permalink":"https://fadhilthomas.github.io/post/falco-01/","summary":"Tulisan ini dibuat sebagai catatan saat mencoba Falco untuk memantau container secara runtime di Amazon EKS.\nApa itu Falco? Falco adalah aplikasi runtime security yang berlisensi open-source dan gratis dikembangkan Sysdic, Inc. Saat tulisan ini dibuat, Falco masuk ke dalam CNCF project dengan status inkubasi.\nManfaat Falco Falco dapat mendeteksi dan mengirimkan notifikasi apabila ada aktifitas di dalam container yang dianggap mencurigakan sesuai dengan aturan atau rule yang sudah dibuat sebelumnya.","title":"Cloud-Native Runtime Security dengan Falco di Amazon EKS"},{"content":" Bulan Maret 2021, GitHub mengadakan security competition, yaitu Capture The Flag yang menjadikan Github Action Workflow sebagai tantangannya.\nPeserta diberikan sebuah repositori pribadi yang berisi sebuah Github Action Workflow dan file Readme yang hanya memiliki akses baca atau pull saja. Tujuan dari tantangan ini yaitu peserta diharuskan melakukan update file di repositori tersebut.\nProblem name: log and process issue comments on: issue_comment: types: [created] jobs: issue_comment: name: log issue comment runs-on: ubuntu-latest steps: - id: comment_log name: log issue comment uses: actions/github-script@v3 env: COMMENT_BODY: ${{ github.event.comment.body }} COMMENT_ID: ${{ github.event.comment.id }} with: github-token: \u0026#34;deadc0de\u0026#34; script: | console.log(process.env.COMMENT_BODY) return process.env.COMMENT_ID result-encoding: string - id: comment_process name: process comment uses: actions/github-script@v3 timeout-minutes: 1 if: ${{ steps.comment_log.outputs.COMMENT_ID }} with: script: | const id = ${{ steps.comment_log.outputs.COMMENT_ID }} return \u0026#34;\u0026#34; result-encoding: string Analysis Sesuai dengan namanya, Github Action di atas memiliki flow untuk melakukan logging dari komentar pada issue yang sudah dibuat. Pada step pertama, Github Action memiliki env yaitu COMMENT_BODY dan COMMENT_ID. Kemudian ia akan melakukan logging isi dari badan komentar menggunakan console.log.\nPada step kedua, terdapat pengecekan kondisi apabila keluaran dari COMMENT_ID pada step pertama bernilai true atau 1, maka Github Action akan mengeksekusi script berikut const id = ${{ steps.comment_log.outputs.COMMENT_ID }} yang mana, terdapat celah keamanan yaitu javascript template injection.\nNamun sebelum bisa memanfaatkan celah template injection, terlebih dahulu harus memenuhi kondisi COMMENT_ID == true. Dalam dokumentasi GitHub, workflow runner akan mengeksekusi workflow command melalui stdout yaitu console.log, dan dalam dokumentasi GitHub juga terdapat command yang dapat membagikan nilai variable antar workflow melalui command set-output.\nExploit Untuk memperbarui file README.md yang ada dalam repositori, maka tambahkan script berikut pada komentar issue:\n::set-output name=COMMENT_ID::1; await github.request(\u0026#39;PUT /repos/{owner}/{repo}/contents/{path}\u0026#39;, { owner: \u0026#39;incrediblysecureinc\u0026#39;, repo: \u0026#39;incredibly-secure-fadhilthomas\u0026#39;, path: \u0026#39;README.md\u0026#39;, message: \u0026#39;update: escalation\u0026#39;, content: \u0026#39;dGFrZW5z\u0026#39;, sha: \u0026#39;4183b7e35a40d11acf98bad686ed2f6834cd71d0\u0026#39; }) Penjelasan dari script di atas sebagai berikut:\n::set-output name=COMMENT_ID::1; berfungsi untuk mengirimkan nilai COMMENT_ID ke step kedua untuk memenuhi pengecekan kondisi. github.request('PUT /repos/{owner}/{repo}/contents/{path} merupakan GitHub REST API untuk memperbarui file. Hasil dari script di atas adalah file README.md berhasil diperbarui sesuai dengan tujuan dari tantangan ini. References https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#stopping-and-starting-workflow-commands https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter https://docs.github.com/en/rest/reference/repos#create-or-update-file-contents ","permalink":"https://fadhilthomas.github.io/post/github-ctf-01/","summary":"Bulan Maret 2021, GitHub mengadakan security competition, yaitu Capture The Flag yang menjadikan Github Action Workflow sebagai tantangannya.\nPeserta diberikan sebuah repositori pribadi yang berisi sebuah Github Action Workflow dan file Readme yang hanya memiliki akses baca atau pull saja. Tujuan dari tantangan ini yaitu peserta diharuskan melakukan update file di repositori tersebut.\nProblem name: log and process issue comments on: issue_comment: types: [created] jobs: issue_comment: name: log issue comment runs-on: ubuntu-latest steps: - id: comment_log name: log issue comment uses: actions/github-script@v3 env: COMMENT_BODY: ${{ github.","title":"[Writeup][CTF][GitHub] Privilege Escalation on GitHub Action"},{"content":" Before starting, IDOR is Insecure Direct Object Reference, hereinafter referred to as IDOR, is a condition in which users can access an object without passing the access rights check. (OWASP, 2019)\nWith IDOR, a user can access, change, and delete data. This makes IDOR a very dangerous security hole. Please note, the bug discussed in this writeup has been patched by Tokopedia, and screenshots will be censored because of PII.\nAffected Endpoint https://[redacted]/cart/v2/shop_group https://[redacted]/cart/v2/add_product_cart https://[redacted]/cart/v2/update_cart https://[redacted]/cart/v2/remove_product_cart Impact Several things can be done by using these vulnerabilities:\nUsers can add a product to another user\u0026rsquo;s wishlist. Users can view the product list in the shopping cart of other users. Users can add a product to another user\u0026rsquo;s shopping cart. Users can change the number of products in another user\u0026rsquo;s shopping cart. The user can delete the product list in another user\u0026rsquo;s shopping cart. Steps to Reproduce I set up two accounts, Account A as Attacker with ID: 37822XXX and Account B as Victim with ID: 49468XXX. Because this finding is chaining which means it involves more than one endpoint, I will divide this article into several sections. Part 1. Viewing Products in Other Users\u0026rsquo; Cart. Login to Attacker\u0026rsquo;s Account.\nNavigate to open the shopping cart to get requests like in Figure 1. Figure 1. Viewing Shopping Cart Request\nTo view products from the Victim\u0026rsquo;s Account shopping cart, then in the request body, change the X-User-ID and Tkpd-UserId, which were initially Account ID A to Account ID B, as shown in Figure 2. Figure 2. Changed Request\nSee the response of requests that have been changed. The request was successful and got product list information in Victim\u0026rsquo;s Account shopping cart such as cart_id, and product list information such as product_id, product quantity, total price, and many more as in Figures 3 and 4. Figure 3. Response From Changed Requests Figure 4. Response From Changed Requests\nSave cart_id information to use in the process of changing and deleting the shopping cart and adding wishlist products that will later require cart_id.\nPart 2. Adding Products to Other Users\u0026rsquo; Shopping Cart. Login to Attacker\u0026rsquo;s Account. Add a product to the shopping cart to get requests like in Figure 5. Figure 5. Add Product to Shopping Cart Request To perform the action of adding products to the Victim\u0026rsquo;s Account shopping cart, then in the request body, change the X-User-ID and Tkpd-UserId which were originally Account ID A to Account ID B as shown in Figure 6. Figure 6. Changed Request See the response of requests that have been changed. The request was successful and got responses such as cart_id, shop_id and customer_id as in Figure 7. Figure 7. Response From Requests That Have Been Changed Then for the verification process, log in to Victim\u0026rsquo;s Account, then select the shopping cart. The result is that the product has been successfully added to Victim\u0026rsquo;s Account as shown in Figure 8. Figure 8. Adding Products Successfully Part 3. Changing Products in Other Users\u0026rsquo; Shopping Cart. Login to Attacker\u0026rsquo;s Account. Changes the number of products in the shopping cart and get request like in Figure 9. Figure 9. Change Product in Shopping Cart Request To change the quantity of products to the Victim\u0026rsquo;s Account shopping cart, then in the request body, change the X-User-ID, Tkpd-UserId and user_id which were originally Account ID A with Account ID B and change cart_id with cart_id obtained from the process of adding the previous product and also change the quantity desired as shown in Figure 10. Figure 10. Changed Request See the response of requests that have been changed. The request was successful and got a response such as ok status as shown in Figure 11. Figure 11. Response from Changed Requests Then for the verification process, log in to Victim\u0026rsquo;s Account, then select the shopping cart. The result is the quantity of products successfully changed in the Victim\u0026rsquo;s Account shopping cart as shown in Figure 12. Figure 12. Changing Products in the Shopping Cart Successfully Part 4. Delete Other Users\u0026rsquo; Shopping Cart. Login to Attacker\u0026rsquo;s Account. Try to remove all products in the shopping cart to get requests that are later needed for the attack process like in Figure 13. Figure 13. Delete Shopping Cart Request To delete all products in the Victim\u0026rsquo;s Account shopping cart, then in the request body, change the X-User-ID, Tkpd-UserId and user_id which were originally Account ID A with Account ID B and also change cart_id with cart_id obtained during the process add the product to the shopping cart as shown in Figure 14. Figure 14. Changed Request See the response of requests that have been changed. The request was successful and got a response ok status. Then for the verification process, log in to Victim\u0026rsquo;s Account, then select the shopping cart. The result is that all products are successfully removed from the Victim\u0026rsquo;s Account shopping cart as shown in Figure 15. Figure 15. Removing Shopping Cart Successfully Part 5. Adding Products to Other Users\u0026rsquo; Wishlist. The process of adding products to the Wishlist Victim\u0026rsquo;s Account list is a continuation of the process of removing products from the shopping cart. When making a request to remove a product from the shopping cart there is an \u0026ldquo;add_wishlist\u0026rdquo; parameter: 0. So to add products to the Wishlist Victim\u0026rsquo;s Account list, change the add_wishlist parameter from 0 to 1 as shown in Figure 16. Figure 16. Changed Request See the response of requests that have been changed. The request was successful and got a response such as ok status as shown in Figure 17. Figure 17. Response From Requests That Have Been Changed Then for the verification process, log in to Victim\u0026rsquo;s Account, then select Wishlist. The result is that the product was successfully added to Wishlist Victim\u0026rsquo;s Account as shown in Figure 18. Figure 18. Adding Products to Wishlist Successfully Remediation Apply access control. Users need to be authorized for information requested before the server provides it. Timeline 17 Apr 2019 : Reported to Tokopedia. 17 Apr 2019 : Tokopedia received the report. 18 Apr 2019 : Tokopedia declared valid with Severity Medium. 29 Aug 2019 : The bug has been fixed. 20 Nov 2019 : Tokopedia sent 1.9 million IDR or $135 as reward. References https://www.owasp.org/index.php/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004) https://www.bugcrowd.com/how-to-find-idor-insecuredirect-object-reference-vulnerabilities-for-large-bountyrewards/ ","permalink":"https://fadhilthomas.github.io/post/bug-bounty-tokopedia-03/","summary":"Before starting, IDOR is Insecure Direct Object Reference, hereinafter referred to as IDOR, is a condition in which users can access an object without passing the access rights check. (OWASP, 2019)\nWith IDOR, a user can access, change, and delete data. This makes IDOR a very dangerous security hole. Please note, the bug discussed in this writeup has been patched by Tokopedia, and screenshots will be censored because of PII.","title":"[Writeup][Bug Bounty][Tokopedia] Manipulate Other User’s Cart and Wishlist on Tokopedia [EN]"},{"content":" Setelah pengguna melakukan logout akunnya, session seharusnya di invalidate untuk menghentikan aksi yang membutuhkan otentikasi seperti menerima notifikasi pesan yang masuk. Pada postingan ini membahas tentang Instagram yang menampilkan notifikasi pesan masuk walaupun pengguna telah mengakhiri session akunnya.\nAfter the user logs out of his account, the session should be invalidated to stop actions that require authentication such as receiving notifications of incoming messages. This post is about Instagram, which shows incoming message notifications even though the user has ended his account session.\nImpact Attacker masih bisa mendapatkan notifikasi pesan yang masuk ke akun korban walaupun sessionnya sudah diakhiri.\nThe attacker can still get notification of messages that go to the victim\u0026rsquo;s account even though the session has ended.\nSteps to Reproduce Attacker berhasil masuk ke akun korban. The attacker has succeeded log in into the victim\u0026rsquo;s account.\nKorban mengetahui bahawa ada orang lain yang telah masuk ke akunnya. The victim knows that someone else has entered her account.\nKorban ingin mengakhiri session dari attacker dengan cara membuka pengaturan Aktifitas Login pada Pengaturan. The victim wants to end the session from the attacker by opening the Login Activity setting in Settings.\nSession attacker berhasil diakhiri. The attacker\u0026rsquo;s session has successfully ended.\nWalaupun attacker sudah berhasil keluar dari akun korban, tetapi apabila ada pesan yang masuk ke akun korban, perangkat attacker masih mendapatkan notifikasi pesan yang masuk. Although the attacker has logged out from the victim\u0026rsquo;s account, if there is a message that enters the victim\u0026rsquo;s account, the attacker\u0026rsquo;s device still gets a notification of the incoming message.\nMungkin hal ini terjadi karena, token FCM dari device attacker masih terdaftar sehingga device attacker masih menerima notifikasi pesan baru. Maybe this happened because FCM tokens from the device attacker were still registered so that the device attacker was still receiving new message notifications.\nTimeline 15 Nov 2019 : Melaporkan ke Facebook. 19 Nov 2019 : Facebook menerima laporan dan meminta informasi lebih detil. 27 Jan 2020 : Facebook menyatakan laporan valid dan memberikan hadiah $750. ","permalink":"https://fadhilthomas.github.io/post/facebook-white-hat-01/","summary":"Setelah pengguna melakukan logout akunnya, session seharusnya di invalidate untuk menghentikan aksi yang membutuhkan otentikasi seperti menerima notifikasi pesan yang masuk. Pada postingan ini membahas tentang Instagram yang menampilkan notifikasi pesan masuk walaupun pengguna telah mengakhiri session akunnya.\nAfter the user logs out of his account, the session should be invalidated to stop actions that require authentication such as receiving notifications of incoming messages. This post is about Instagram, which shows incoming message notifications even though the user has ended his account session.","title":"[Writeup][Bug Bounty][Instagram] Instagram Still Send New DMs and Video Calls to Device After Logout [ID][EN]"},{"content":" Setelah melakukan login, kita akan dialihkan ke halaman verifikasi dengan dua opsi yaitu SMS dan Telepon. Nomor telepon yang digunakan untuk mengirimkan kode verifikasi tidak diperlihatkan seluruhnya untuk alasan keamanan. Akan tetapi informasi pengguna tersimpan di dalam Cookie dan hanya dilakukan URL-encoding.\nAffected Endpoint https://accounts.tokopedia.com/otp/c/page Impact Apabila kredential pengguna bocor dan seseorang mencoba untuk melakukan login, walaupun dia belum melewati halaman verifikasi tetapi dia sudah bisa mendapatkan informasi sensitif pengguna seperti nama, nomor telepon, email, tanggal pendaftaran dan ulang tahun yang dapat digunakan untuk melakukan phishing untuk mencuri kode verifikasi. Steps to Reproduce Login ke Tokopedia. Pilih salah satu verifikasi, intercept request. Dalam parameter badan request, email dan nomor telepon ditutupi tetapi ada informasi menarik dalam cookie Coba URL decode informasi tersebut. Terbukti informasi tersebut adalah informasi sensitif pengguna seperti: nama, nomor telepon, email, tanggal pendaftaran, dan ulang tahun. Timeline 13 Feb 2019 : Melaporkan ke Tokopedia. 13 Feb 2019 : Tokopedia menerima laporan. 13 Feb 2019 : Tokopedia menyatakan tidak valid. 15 Apr 2019 : Bug telah diperbaiki. References http://cwe.mitre.org/data/definitions/200.html http://projects.webappsec.org/w/page/13246936/Information Leakage ","permalink":"https://fadhilthomas.github.io/post/bug-bounty-tokopedia-02/","summary":"Setelah melakukan login, kita akan dialihkan ke halaman verifikasi dengan dua opsi yaitu SMS dan Telepon. Nomor telepon yang digunakan untuk mengirimkan kode verifikasi tidak diperlihatkan seluruhnya untuk alasan keamanan. Akan tetapi informasi pengguna tersimpan di dalam Cookie dan hanya dilakukan URL-encoding.\nAffected Endpoint https://accounts.tokopedia.com/otp/c/page Impact Apabila kredential pengguna bocor dan seseorang mencoba untuk melakukan login, walaupun dia belum melewati halaman verifikasi tetapi dia sudah bisa mendapatkan informasi sensitif pengguna seperti nama, nomor telepon, email, tanggal pendaftaran dan ulang tahun yang dapat digunakan untuk melakukan phishing untuk mencuri kode verifikasi.","title":"[Writeup][Bug Bounty][Tokopedia] Information Disclosure of Sensitive Information pada Verification Login Page [ID]"},{"content":"No Rate Limit adalah sebuah kondisi di mana sebuah aplikasi tidak memiliki pembatasan terhadap request yang sama. Jadi seseorang dapat mengirimkan request sama yang berulang-ulang.\nAffected Endpoint https://[redacted]/api/internal/auth/reset_password_email Impact Karena service yang tidak memiliki rate limit berhubungan dengan layanan email, maka seseorang dapat membuat service ini mengirimkan email reset password secara masif. Hal ini dapat membuat reputasi pengirim email menjadi buruk dan dinilai sebagai spammer oleh Email Provider seperti Gmail.\nSteps to Reproduce Lakukan reset password untuk mendapatkan request. Setelah request didapat, ulangi request dengan tool Burp Suite. Pilih request yang ingin diulangi, kemudian kirim ke Intruder. Hapus semua payload position, kemudian ubah tipe Payload menjadi Null Payload. Kemudian dalam Payload Option, pilih Continue Indefinitely. Pilih Start Attack untuk mengirimkan request terus menerus. Periksa inbox email untuk melihat jumlah email reset password yang masuk sesuai dengan jumlah request yang dikirim. Timeline 03 Oct 2019 : Sent the report. 07 Oct 2019 : The report is triaged. 02 Nov 2019 : $200 sent as reward. ","permalink":"https://fadhilthomas.github.io/post/bug-bounty-redacted-01/","summary":"No Rate Limit adalah sebuah kondisi di mana sebuah aplikasi tidak memiliki pembatasan terhadap request yang sama. Jadi seseorang dapat mengirimkan request sama yang berulang-ulang.\nAffected Endpoint https://[redacted]/api/internal/auth/reset_password_email Impact Karena service yang tidak memiliki rate limit berhubungan dengan layanan email, maka seseorang dapat membuat service ini mengirimkan email reset password secara masif. Hal ini dapat membuat reputasi pengirim email menjadi buruk dan dinilai sebagai spammer oleh Email Provider seperti Gmail.","title":"[Writeup][Bug Bounty][Redacted] No Rate Limit in Forgot Password [ID]"},{"content":" Before starting, IDOR is Insecure Direct Object Reference, hereinafter referred to as IDOR, is a condition in which users can access an object without passing the access rights check. (OWASP, 2019)\nWith IDOR, a user can access, change, and delete data. This makes IDOR a very dangerous security hole. Please note, the bug discussed in this writeup has been patched by Tokopedia and screenshots will be censored because of PII.\nAffected Endpoint https://ws.tokopedia.com/reputationapp/review/api/v1/likedislike Impact Manipulation of number of likes in Product Reviews\nSteps to Reproduce Log in to your Tokopedia account and open a product review page. Intercept the connection request, click the like a review button. In the intercepted connection request, there are several parameters, such as: product_id is the product id being reviewed, shop_id is a shop id, and user_id is the user id who likes. Forward request, then get a success reply. To try to manipulate the number of likes is by replacing the user id with another user id, without the need for user interaction. Change user_id with another user id and delete some parameters to bypass user authentication. Forward request. The number of likes has increased. Timeline 23 Feb 2019 : Reported to Tokopedia. 23 Feb 2019 : Tokopedia received the report. 25 Feb 2019 : Tokopedia declared valid with Severity Medium. 01 Apr 2019 : The bug has been fixed. 22 May 2019 : Tokopedia sent 1.9 million IDR or $135 as reward. References https://www.owasp.org/index.php/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004) https://www.bugcrowd.com/how-to-find-idor-insecuredirect-object-reference-vulnerabilities-for-large-bountyrewards/ ","permalink":"https://fadhilthomas.github.io/post/bug-bounty-tokopedia-01-en/","summary":"Before starting, IDOR is Insecure Direct Object Reference, hereinafter referred to as IDOR, is a condition in which users can access an object without passing the access rights check. (OWASP, 2019)\nWith IDOR, a user can access, change, and delete data. This makes IDOR a very dangerous security hole. Please note, the bug discussed in this writeup has been patched by Tokopedia and screenshots will be censored because of PII.","title":"[Writeup][Bug Bounty][Tokopedia] Manipulation of Likes in Product Reviews [EN]"},{"content":" BoyExpress [City Courier Startup] https://www.instagram.com/p/B4284T5Ahj4/ BoyExpress Driver [City Courier Startup] https://www.instagram.com/p/B428-FRgRsX/ Rumah Madu [Honey Shop] Colorize MyPhotos [Colorize Black and White to Colorful Photos] https://www.instagram.com/p/B5BlEsalTss/ Gerak Melingkar E-Book [Circular Motion E-Book] https://www.instagram.com/p/B5Gl3hGlmgO/ Mokoko [Self-Help Store Marketplace Android App with e-Wallet] https://www.instagram.com/p/B5Qi69CFkdX/ ProToko [Self-Help Store Marketplace Android App and Sales] https://www.instagram.com/p/B428LF0g_61/ RSA Encrypt-Decrypt [RSA Encryption and Decryption] https://www.instagram.com/p/B5GoXMflP6E/ SIAA Chatbot [Academic Information System Chatbot] SISKA Chatbot [Mild Disease Self-Medication Chatbot] https://www.instagram.com/p/B5Qi-9QlgTn/ Scele Reminder [Tasks Reminder for e-Learning Web] Telepon Darurat Lampung [Emergency Contacts List in Lampung Province] Telepon Darurat SumSel [Emergency Contacts List in South Sumatera Province] AnoneShakeShake [\u0026lsquo;Anone\u0026rsquo; Sound Shake Player Android App] ","permalink":"https://fadhilthomas.github.io/portfolio/android-apps/","summary":"List of Android Apps","title":"[Porfolio] Android Apps"},{"content":" Acorns App [Bugcrowd] Airbnb [HackerOne] Alodokter App [Alodokter] Arlo Cash Rewards App [Bugcrowd] Bukalapak App [Bukalapak] Deliveroo App [HackerOne] Direktorat Jenderal Pajak [VVDP BSSN] Fitbit App [Bugcrowd] Giladiskon App [Giladiskon Indonesia] Instagram App [Facebook WhiteHat Program] JamTangan.com App [JamTangan.com] Jeo Kompas Website [Kompas] Kementerian ESDM RI [VVDP BSSN] Klik Indomaret App [Indomaret] Komisi Pemilihan Umum RI [VVDP BSSN] LINE App [HackerOne] LangitPay App [LangitPay] Marriott [HackerOne] Mudah.My App [Mudah.My] NeoGov [Bugcrowd] PayPal App [HackerOne] Pomona App [Pomona] Qureta Website [Qureta] RedStorm Platform [RedStorm Program] Rentist App [Cyber Army Program] SMPB Teknokrat [Universitas Teknokrat Indonesia] Sampingan App [Sampingan] Skyscanner App [Bugcrowd] Takeaway.com App [Bugcrowd] Tokopedia App [Tokopedia][8 Reports] Trello App [Bugcrowd] TripAdvisor App [Bugcrowd][3 Reports] Wattpad App [Wattpad] Western Union App [Bugcrowd] klikDOKTER App [klikDOKTER] ","permalink":"https://fadhilthomas.github.io/portfolio/bug-bounty-programs/","summary":"List of Bug Bounty Programs","title":"[Porfolio] Bug Bounty Program"},{"content":" Irta Chatbot [Cooking Assistant Line Chatbot] https://github.com/fadhilthomas/irta-backend\nSIAA Chatbot [Webhook for SIAA Chatbot using Botman and CodeIgniter]\nVigenere Cipher [Vigenere Cipher Encoder-Decoder Web-based] https://github.com/fadhilthomas/vigenere-cipher\nAlgebra Transformation https://github.com/fadhilthomas/labs-algebra-transformation-desktop\nBatch CRC Renamer https://github.com/fadhilthomas/batch-crc-renamer\nCaesar Cipher https://github.com/fadhilthomas/caesar-cipher\nIndonesian Spell Checker https://github.com/fadhilthomas/pyindonesian-spell-checker-python\nFace Recognition Template Matching https://github.com/fadhilthomas/labs-face-recognition-desktop\nIndonesian Words Normalization [Words Normalization w/ Damerau–Levenshtein distance]\nNum Converter [Number Converter w/ Python2 and Mathlab] https://github.com/fadhilthomas/pynum-converter-python\nSAT Cipher [Modified XOR Cipher] https://github.com/fadhilthomas/pysat-cipher-python\nSales Transaction Oracle Database https://github.com/fadhilthomas/labs-transaction-oracle\nSales Transaction SQL Server Database https://github.com/fadhilthomas/labs-transaction-sqlserver\n","permalink":"https://fadhilthomas.github.io/portfolio/web-apps/","summary":"List of Web Apps","title":"[Porfolio] Web Apps"},{"content":" [2020-07-29][Tribun News] - Cerita Pemuda Lampung Temukan Bug Instagram dan Tokopedia, Thomas Dapat Imbalan 750 Dolar https://lampung.tribunnews.com/2020/07/29/cerita-pemudalampung-temukanbug-instagram-dan-tokopedia-thomas-dapat-imbalan750-dolar [2020-07-10][Rilis.id] - Thomas Fadhila, Alumnus Teknokrat yang Sukses Temukan “Bug” di Tokopedia dan Instagram https://lampung.rilis.id/Humaniora/Berita/Thomas-Fadhila-Alumnus-Teknokrat-yang-Sukses-Temukan-Bug-di-Tokopedia-dan-Instagram [2020-07-10][LampungPro] - Penemu \u0026lsquo;Bug\u0026rsquo; di Aplikasi Tokopedia dan Instagram Ternyata Alumni Universitas Teknokrat Indonesia https://lampungpro.co/post/29030/penemu-bug-di-aplikasi-tokopedia-dan-instagram-ternyata-alumni-universitas-teknokrat-indonesia [2020-07-10][Radar Lampung] - Kisah Alumni Teknokrat Temukan Bug Instagram dan Tokopedia https://radarlampung.co.id/2020/07/10/kisah-alumni-teknokrat-temukan-bug-instagram-dan-tokopedia/ [2020-07-09][Warta9] - Thomas Fadhila, Alumni Universitas Teknokrat Penemu Bug di Tokopedia dan Instagram https://warta9.com/thomas-fadhila-alumni-universitas-teknokrat-penemu-bug-di-tokopedia-dan-instagram/ [2020-07-08][Cyberthreat.id] - Cerita Muhammad Thomas Fadhila Temukan Bug di Tokopedia dan Instagram https://cyberthreat.id/read/7481 ","permalink":"https://fadhilthomas.github.io/publicity/publicity/","summary":"List of Publicity","title":"[Publicity]"},{"content":" Sebelum mulai ke pembahasan, pertama kita bahas dulu apa itu IDOR. Insecure Direct Object Reference yang selanjutnya disebut IDOR adalah suatu kondisi di mana pengguna dapat mengakses suatu objek tanpa melewati pemeriksaan hak akses. (OWASP, 2019)\nDengan celah IDOR, seorang pengguna dapat melakukan pengaksesan, pengubahan, serta penghapusan suatu data. Hal ini membuat IDOR termasuk celah keamanan yang sangat berbahaya.\nBaiklah, setelah mengetahui apa itu IDOR, kita lanjut ke pembahasan mengenai bug ini. Perlu diketahui, bug yang dibahas pada writeup ini sudah dipatch oleh pihak Tokopedia dan screenshot akan disensor karena PII.\nAffected Endpoint https://ws.tokopedia.com/reputationapp/review/api/v1/likedislike Impact Manipulasi jumlah likes pada Ulasan Produk\nSteps to Reproduce Login ke dalam akun Tokopedia dan buka halaman ulasan suatu produk. Intercept koneksi request, klik tombol like suatu review. Dalam koneksi request yang ter-intercept, ada beberapa parameter yaitu: product_id adalah id product yang direview, shop_id adalah id toko, dan user_id adalah id user yang melakukan like. Forward request, kemudian mendapat balasan success. Untuk mencoba melakukan manipulasi yaitu menambah jumlah like yaitu dengan mengganti id user dengan id user lain, tanpa perlu interaksi user tersebut. Ubah user_id dengan id user lain dan hapus beberapa parameter untuk melewati autentikasi user. Forward request lagi. Jumlah like bertambah. Timeline 23 Feb 2019 : Melaporkan ke Tokopedia. 23 Feb 2019 : Tokopedia menerima laporan. 25 Feb 2019 : Tokopedia menyatakan valid dengan severity Medium. 01 Apr 2019 : Bug telah diperbaiki. 22 May 2019 : Reward dikirim. References https://www.owasp.org/index.php/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004) https://www.bugcrowd.com/how-to-find-idor-insecuredirect-object-reference-vulnerabilities-for-large-bountyrewards/ ","permalink":"https://fadhilthomas.github.io/post/bug-bounty-tokopedia-01/","summary":"Sebelum mulai ke pembahasan, pertama kita bahas dulu apa itu IDOR. Insecure Direct Object Reference yang selanjutnya disebut IDOR adalah suatu kondisi di mana pengguna dapat mengakses suatu objek tanpa melewati pemeriksaan hak akses. (OWASP, 2019)\nDengan celah IDOR, seorang pengguna dapat melakukan pengaksesan, pengubahan, serta penghapusan suatu data. Hal ini membuat IDOR termasuk celah keamanan yang sangat berbahaya.\nBaiklah, setelah mengetahui apa itu IDOR, kita lanjut ke pembahasan mengenai bug ini.","title":"[Writeup][Bug Bounty][Tokopedia] Manipulasi Jumlah Likes di Ulasan Produk [ID]"}]